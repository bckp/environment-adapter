<?php
declare(strict_types=1);

namespace Mallgroup\DI\Config\Adapters;

use Mallgroup\Environment;
use Nette\DI\Config\Adapter;
use Nette\DI\Definitions\Statement;
use Nette\DI\InvalidConfigurationException;
use Nette\Neon\Entity;
use Nette\Neon\Neon;
use Nette\Utils\FileSystem;

use function array_walk_recursive;
use function gettype;
use function ltrim;
use function strtoupper;
use function substr;

class EnvironmentAdapter implements Adapter
{
    /**
     * Reads configuration from PHP file.
     * @return array<string, array<string, array<string, mixed>>>
     */
    public function load(string $file): array
    {
        /** @var array<string, mixed> $data */
        $data = (array)Neon::decode(FileSystem::read($file));
        return $this->process($data);
    }

    /**
     * @param array<string,mixed> $data
     * @return array<string, array<string, array<string, mixed>>>
     */
    protected function process(array $data): array
    {
        $envs = [];

        foreach ($data as $name => $entity) {
            if (!$entity instanceof Entity) {
                throw new InvalidConfigurationException(
                    "Invalid argument type ({$name}). Expected Entity, got " . gettype($entity)
                );
            }

            $default = (string)($entity->attributes[0] ?? '');
            $cast = substr((string)$entity->value, 2);
            $envName = strtoupper($name);

            // Get hidden
            if ($entity->attributes[1] ?? false) {
                $envs[$name] = new Statement("Mallgroup\Environment::$cast", [
                    $envName,
                    $default
                ]);
            } else {
                $envs[$name] = (new Environment($envName, $default))->get($cast);
            }
        }
        return ['parameters' => ['env' => $envs]];
    }


    /**
     * Generates configuration in PHP format.
     * @param mixed[] $data
     */
    public function dump(array $data): string
    {
        $data = (array)($data['parameters']['env'] ?? []);
        array_walk_recursive(
            $data,
            static function (mixed &$val): void {
                if ($val instanceof Statement && $entity = $val->getEntity()) {
                    $args = $val->arguments;

                    if (is_array($entity) && $entity[0] === Environment::class) {
                        $type = (string) ($entity[1] ?? 'string');
                        $args = [
                            $args[1] ?? '',
                            true
                        ];
                        $entity = '::' . $type;
                    }

                    $val = new Entity($entity, $args);
                }
            },
        );
        return "# generated by Nette\n\n" . Neon::encode($data, Neon::BLOCK);
    }
}
